/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.mycompany.trinidadenrollment;

import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import java.sql.ResultSet;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.Statement;
import java.time.Year;

/**
 *
 * @author jpbtrinidad
 */
public class StudentsForm extends javax.swing.JFrame {

    /**
     * Creates new form StudentForm
     */
    public StudentsForm() {
        initComponents();
        StudentID.setEditable(false);
       
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        StudentID = new javax.swing.JTextField();
        Name = new javax.swing.JTextField();
        Address = new javax.swing.JTextField();
        Course = new javax.swing.JTextField();
        Gender = new javax.swing.JTextField();
        YrLevel = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        studForm_Table = new javax.swing.JTable();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jButton4 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenuItem2 = new javax.swing.JMenuItem();
        jMenuItem3 = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JPopupMenu.Separator();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        jMenu3 = new javax.swing.JMenu();
        jMenuItem4 = new javax.swing.JMenuItem();
        jMenuItem5 = new javax.swing.JMenuItem();
        jMenuItem6 = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        StudentID.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                StudentIDActionPerformed(evt);
            }
        });

        Name.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                NameActionPerformed(evt);
            }
        });

        Course.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CourseActionPerformed(evt);
            }
        });

        jLabel1.setText("Student ID");

        jLabel2.setText("Enter Name");

        jLabel3.setText("Enter Course");

        jLabel4.setText("Enter Address");

        jLabel5.setText("Enter Gender");

        jLabel6.setText("Enter YrLevel");

        jButton1.setText("Save");
        jButton1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton1MouseClicked(evt);
            }
        });

        jButton2.setText("Delete");
        jButton2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton2MouseClicked(evt);
            }
        });
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setText("Update");
        jButton3.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton3MouseClicked(evt);
            }
        });

        studForm_Table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "Student ID", "Name", "Address", "Course", "Gender", "YrLevel"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        studForm_Table.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                studForm_TableMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(studForm_Table);

        jLabel7.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        jLabel7.setText("Student Form");

        jLabel8.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel8.setText("Enrolled Subjects");

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "SubjID", "SubjCode", "SubjDesc", "SubUnits", "SubjSched"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jScrollPane2.setViewportView(jTable1);

        jButton4.setText("Enroll Subject");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jButton5.setText("Drop Subject");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        jMenu1.setText("Form");

        jMenuItem2.setText("Subject");
        jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem2ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem2);

        jMenuItem3.setText("Teachers");
        jMenuItem3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem3ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem3);
        jMenu1.add(jSeparator1);

        jMenuItem1.setText("Exit");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem1);

        jMenuBar1.add(jMenu1);

        jMenu2.setText("Edit");
        jMenuBar1.add(jMenu2);

        jMenu3.setText("Database");

        jMenuItem4.setText("1st Semester");
        jMenuItem4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem4ActionPerformed(evt);
            }
        });
        jMenu3.add(jMenuItem4);

        jMenuItem5.setText("2nd Semester");
        jMenuItem5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem5ActionPerformed(evt);
            }
        });
        jMenu3.add(jMenuItem5);

        jMenuItem6.setText("Summer");
        jMenuItem6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem6ActionPerformed(evt);
            }
        });
        jMenu3.add(jMenuItem6);

        jMenuBar1.add(jMenu3);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(51, 51, 51)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jButton4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jButton5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(43, 43, 43)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(34, 34, 34))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jButton1)
                            .addComponent(jLabel6)
                            .addComponent(jLabel5)
                            .addComponent(jLabel3)
                            .addComponent(jLabel4)
                            .addComponent(jLabel2)
                            .addComponent(jLabel1)
                            .addComponent(jLabel8))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(Address)
                            .addComponent(Course)
                            .addComponent(Gender)
                            .addComponent(YrLevel)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jButton2)
                                .addGap(18, 18, 18)
                                .addComponent(jButton3))
                            .addComponent(StudentID, javax.swing.GroupLayout.PREFERRED_SIZE, 227, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(Name))
                        .addGap(529, 529, 529))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(StudentID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel1))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(Name, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel2))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(Address, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel4))
                        .addGap(9, 9, 9)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(Course, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel3))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(Gender, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel5))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(YrLevel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel6))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jButton1)
                            .addComponent(jButton2)
                            .addComponent(jButton3))))
                .addGap(36, 36, 36)
                .addComponent(jLabel8)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 201, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jButton4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton5)))
                .addContainerGap(195, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void StudentIDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_StudentIDActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_StudentIDActionPerformed

    private void NameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_NameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_NameActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton1MouseClicked
        Students student = new Students();
    student.saveRecord(Name.getText(), Address.getText(), Course.getText(), Gender.getText(), YrLevel.getText());
    
    showRecords();
    StudentID.setText("");
        Name.setText("");
        Address.setText("");
        Course.setText("");  
        Gender.setText("");
        YrLevel.setText("");  
    }//GEN-LAST:event_jButton1MouseClicked

    private void jButton2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton2MouseClicked
     Students student = new Students();
        student.deleteRecord(Integer.parseInt(StudentID.getText()));
        
        showRecords();
        StudentID.setText("");
        Name.setText("");
        Address.setText("");
        Course.setText("");  
        Gender.setText("");
        YrLevel.setText("");  
    }//GEN-LAST:event_jButton2MouseClicked

    private void jButton3MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton3MouseClicked
        Students student = new Students();
        student.updateRecord(Integer.parseInt(StudentID.getText()), Name.getText(), Address.getText(), Course.getText(), Gender.getText(), YrLevel.getText());
        
        showRecords();
        StudentID.setText("");
        Name.setText("");
        Address.setText("");
        Course.setText("");  
        Gender.setText("");
        YrLevel.setText("");  
    }//GEN-LAST:event_jButton3MouseClicked

    private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem2ActionPerformed
        SubjectForm SForm = new SubjectForm();
        SForm.setVisible(true);
    }//GEN-LAST:event_jMenuItem2ActionPerformed

    private void jMenuItem3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem3ActionPerformed
        TeacherForm TForm = new TeacherForm();
        TForm.setVisible(true);

        // TODO add your handling code here:
    }//GEN-LAST:event_jMenuItem3ActionPerformed

    private void studForm_TableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_studForm_TableMouseClicked
        int selectedRow = studForm_Table.getSelectedRow();
 
    if (selectedRow != -1) { // if a row is selected
        String id = studForm_Table.getValueAt(selectedRow, 0).toString(); //
        String name = studForm_Table.getValueAt(selectedRow, 1).toString(); //
        String address = studForm_Table.getValueAt(selectedRow, 2).toString(); //
        String course = studForm_Table.getValueAt(selectedRow, 3).toString(); //
        String gender = studForm_Table.getValueAt(selectedRow, 4).toString(); //
        String yrLevel = studForm_Table.getValueAt(selectedRow, 5).toString(); //

        StudentID.setText(id); //
        Name.setText(name); //
        Address.setText(address); //
        Course.setText(course); //
        Gender.setText(gender); //
        YrLevel.setText(yrLevel); //
        
        ShowEnrollRec(Integer.parseInt(id));
    } else {
        System.out.println("No row selected.");
    }                      
    }//GEN-LAST:event_studForm_TableMouseClicked

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        showRecords();
        
        Students student = new Students();
        student.loadRecord();       
        
        jLabel7.setText("Student Form " +TrinidadEnrollmentSystem.db);
    }//GEN-LAST:event_formWindowOpened

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
         System.exit(0);
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
       String studentIdStr = StudentID.getText();

    if (studentIdStr.isEmpty()) {
        return;
    }

    if (TrinidadEnrollmentSystem.currentlySelectedSubjectId == -1) {
        return;
    }

    try {
        int studID = Integer.parseInt(studentIdStr);
        int subjID = TrinidadEnrollmentSystem.currentlySelectedSubjectId;

        String confirmMessage = "Enroll Student ID:" + studID + " to subject ID:" + subjID;

        int choice = javax.swing.JOptionPane.showConfirmDialog(
            this,
            confirmMessage,
            "alert",
            javax.swing.JOptionPane.OK_CANCEL_OPTION,
            javax.swing.JOptionPane.QUESTION_MESSAGE
        );

        if (choice == javax.swing.JOptionPane.OK_OPTION) {
            Enrolled enrollAction = new Enrolled();
            enrollAction.setsubjid(subjID);
            String resultMessage = enrollAction.enrollStud(studID);
            
            javax.swing.JOptionPane.showMessageDialog(this, resultMessage);

            ShowEnrollRec(studID);
        }

    } catch (NumberFormatException ex) {
    }
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
           String studentIdStr = StudentID.getText();
    int selectedSubjectRow = jTable1.getSelectedRow();

    String subjIdStr = jTable1.getValueAt(selectedSubjectRow, 0).toString();

    String confirmMessage = "Drop Subject ID:" + subjIdStr + " from Student ID:" + studentIdStr;
    int choice = javax.swing.JOptionPane.showConfirmDialog(this, confirmMessage, "alert", javax.swing.JOptionPane.OK_CANCEL_OPTION, javax.swing.JOptionPane.QUESTION_MESSAGE);

    if (choice == javax.swing.JOptionPane.OK_OPTION) {
        try {
            int studID = Integer.parseInt(studentIdStr);
            int subjID = Integer.parseInt(subjIdStr);

            Enrolled enrollAction = new Enrolled();
            enrollAction.setsubjid(subjID);
            String resultMessage = enrollAction.DropSubj(studID);

            javax.swing.JOptionPane.showMessageDialog(this, resultMessage);
            ShowEnrollRec(studID);

        } catch (NumberFormatException ex) {
            javax.swing.JOptionPane.showMessageDialog(this, "The selected ID is not a valid number.", "Error", javax.swing.JOptionPane.ERROR_MESSAGE);
        }
    }
    }//GEN-LAST:event_jButton5ActionPerformed

    private void jMenuItem4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem4ActionPerformed
            try {

            int currentYear = java.time.Year.now().getValue();
            int nextYear = currentYear + 1;
            String schoolYear = "SY" + currentYear + "_" + nextYear;
            String dbName = "1st_" + schoolYear;
            
            TrinidadEnrollmentSystem.db = dbName;
            
            TrinidadEnrollmentSystem.DBConnect();

            TrinidadEnrollmentSystem.st.execute("CREATE TABLE IF NOT EXISTS Students ("
                    + "studid INT PRIMARY KEY AUTO_INCREMENT,"
                    + "studname VARCHAR(100) NOT NULL,"
                    + "studadd VARCHAR(200) NOT NULL,"
                    + "studcrs VARCHAR(100) NOT NULL,"
                    + "studgender VARCHAR(20) NOT NULL,"
                    + "yrlvl VARCHAR(20) NOT NULL"
                    + ")");

            TrinidadEnrollmentSystem.st.execute("CREATE TABLE IF NOT EXISTS Subjects ("
                    + "subjid INT PRIMARY KEY AUTO_INCREMENT,"
                    + "subjcode VARCHAR(50) NOT NULL,"
                    + "subjdesc VARCHAR(200) NOT NULL,"
                    + "subjunits INT NOT NULL,"
                    + "subjsched VARCHAR(100) NOT NULL"
                    + ")");

            TrinidadEnrollmentSystem.st.execute("CREATE TABLE IF NOT EXISTS Teachers ("
                    + "Tid INT PRIMARY KEY AUTO_INCREMENT,"
                    + "Tname VARCHAR(100) NOT NULL,"
                    + "Tdept VARCHAR(100) NOT NULL,"
                    + "Tadd VARCHAR(200) NOT NULL,"
                    + "Tcontact VARCHAR(50) NOT NULL"
                    + ")");

            TrinidadEnrollmentSystem.st.execute("CREATE TABLE IF NOT EXISTS Enroll ("
                    + "eid INT PRIMARY KEY AUTO_INCREMENT,"
                    + "studid INT NOT NULL,"
                    + "subjid INT NOT NULL,"
                    + "UNIQUE (studid, subjid),"
                    + "FOREIGN KEY (studid) REFERENCES Students(studid),"
                    + "FOREIGN KEY (subjid) REFERENCES Subjects(subjid)"
                    + ")");

            TrinidadEnrollmentSystem.st.execute("CREATE TABLE IF NOT EXISTS Assign ("
                    + "Tid INT NOT NULL,"
                    + "subjid INT PRIMARY KEY,"
                    + "FOREIGN KEY (Tid) REFERENCES Teachers(Tid),"
                    + "FOREIGN KEY (subjid) REFERENCES Subjects(subjid)"
                    + ")");

            TrinidadEnrollmentSystem.st.execute("CREATE TABLE IF NOT EXISTS Grades ("
                    + "GradeID INT PRIMARY KEY AUTO_INCREMENT,"
                    + "eid INT NOT NULL UNIQUE,"
                    + "Prelim TEXT NOT NULL,"
                    + "Midterm TEXT NOT NULL,"
                    + "Prefinal TEXT NOT NULL,"
                    + "Final TEXT NOT NULL,"
                    + "FOREIGN KEY (eid) REFERENCES Enroll(eid)"
                    + ")");

            TrinidadEnrollmentSystem.st.execute("CREATE TABLE IF NOT EXISTS TransactionCharges ("
                    + "TransID INT PRIMARY KEY,"
                    + "Department TEXT NOT NULL,"
                    + "SubjUnits DECIMAL(10,2) NOT NULL,"
                    + "Insurance DECIMAL(10,2) NOT NULL,"
                    + "Computer DECIMAL(10,2) NOT NULL,"
                    + "Laboratory DECIMAL(10,2) NOT NULL,"
                    + "Cultural DECIMAL(10,2) NOT NULL,"
                    + "Library DECIMAL(10,2) NOT NULL,"
                    + "Facility DECIMAL(10,2) NOT NULL"
                    + ")");

            TrinidadEnrollmentSystem.st.execute("CREATE TABLE IF NOT EXISTS Invoice ("
                    + "Invoicenum INT PRIMARY KEY,"
                    + "studid INT NOT NULL,"
                    + "TransID INT NOT NULL,"
                    + "FOREIGN KEY (studid) REFERENCES Students(studid),"
                    + "FOREIGN KEY (TransID) REFERENCES TransactionCharges(TransID)"
                    + ")");

            JOptionPane.showMessageDialog(
                    this,
                    "Database Created: " + dbName,
                    "New Database",
                    JOptionPane.INFORMATION_MESSAGE
            );

            showRecords();
            
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, "Error creating database/tables: " + ex.getMessage());
        }
    }//GEN-LAST:event_jMenuItem4ActionPerformed

    private void jMenuItem5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem5ActionPerformed
        try {
            int currentYear = java.time.Year.now().getValue();
            int nextYear = currentYear + 1;
            String schoolYear = "SY" + currentYear + "_" + nextYear;
            String dbName = "2nd_" + schoolYear;
            
            TrinidadEnrollmentSystem.db = dbName;
            
            TrinidadEnrollmentSystem.DBConnect();

            TrinidadEnrollmentSystem.st.execute("CREATE TABLE IF NOT EXISTS Students ("
                    + "studid INT PRIMARY KEY AUTO_INCREMENT,"
                    + "studname VARCHAR(100) NOT NULL,"
                    + "studadd VARCHAR(200) NOT NULL,"
                    + "studcrs VARCHAR(100) NOT NULL,"
                    + "studgender VARCHAR(20) NOT NULL,"
                    + "yrlvl VARCHAR(20) NOT NULL"
                    + ")");

            TrinidadEnrollmentSystem.st.execute("CREATE TABLE IF NOT EXISTS Subjects ("
                    + "subjid INT PRIMARY KEY AUTO_INCREMENT,"
                    + "subjcode VARCHAR(50) NOT NULL,"
                    + "subjdesc VARCHAR(200) NOT NULL,"
                    + "subjunits INT NOT NULL,"
                    + "subjsched VARCHAR(100) NOT NULL"
                    + ")");

            TrinidadEnrollmentSystem.st.execute("CREATE TABLE IF NOT EXISTS Teachers ("
                    + "Tid INT PRIMARY KEY AUTO_INCREMENT,"
                    + "Tname VARCHAR(100) NOT NULL,"
                    + "Tdept VARCHAR(100) NOT NULL,"
                    + "Tadd VARCHAR(200) NOT NULL,"
                    + "Tcontact VARCHAR(50) NOT NULL"
                    + ")");

            TrinidadEnrollmentSystem.st.execute("CREATE TABLE IF NOT EXISTS Enroll ("
                    + "eid INT PRIMARY KEY AUTO_INCREMENT,"
                    + "studid INT NOT NULL,"
                    + "subjid INT NOT NULL,"
                    + "UNIQUE (studid, subjid),"
                    + "FOREIGN KEY (studid) REFERENCES Students(studid),"
                    + "FOREIGN KEY (subjid) REFERENCES Subjects(subjid)"
                    + ")");

            TrinidadEnrollmentSystem.st.execute("CREATE TABLE IF NOT EXISTS Assign ("
                    + "Tid INT NOT NULL,"
                    + "subjid INT PRIMARY KEY,"
                    + "FOREIGN KEY (Tid) REFERENCES Teachers(Tid),"
                    + "FOREIGN KEY (subjid) REFERENCES Subjects(subjid)"
                    + ")");

            TrinidadEnrollmentSystem.st.execute("CREATE TABLE IF NOT EXISTS Grades ("
                    + "GradeID INT PRIMARY KEY AUTO_INCREMENT,"
                    + "eid INT NOT NULL UNIQUE,"
                    + "Prelim TEXT NOT NULL,"
                    + "Midterm TEXT NOT NULL,"
                    + "Prefinal TEXT NOT NULL,"
                    + "Final TEXT NOT NULL,"
                    + "FOREIGN KEY (eid) REFERENCES Enroll(eid)"
                    + ")");

            TrinidadEnrollmentSystem.st.execute("CREATE TABLE IF NOT EXISTS TransactionCharges ("
                    + "TransID INT PRIMARY KEY,"
                    + "Department TEXT NOT NULL,"
                    + "SubjUnits DECIMAL(10,2) NOT NULL,"
                    + "Insurance DECIMAL(10,2) NOT NULL,"
                    + "Computer DECIMAL(10,2) NOT NULL,"
                    + "Laboratory DECIMAL(10,2) NOT NULL,"
                    + "Cultural DECIMAL(10,2) NOT NULL,"
                    + "Library DECIMAL(10,2) NOT NULL,"
                    + "Facility DECIMAL(10,2) NOT NULL"
                    + ")");

            TrinidadEnrollmentSystem.st.execute("CREATE TABLE IF NOT EXISTS Invoice ("
                    + "Invoicenum INT PRIMARY KEY,"
                    + "studid INT NOT NULL,"
                    + "TransID INT NOT NULL,"
                    + "FOREIGN KEY (studid) REFERENCES Students(studid),"
                    + "FOREIGN KEY (TransID) REFERENCES TransactionCharges(TransID)"
                    + ")");

            JOptionPane.showMessageDialog(
                    this,
                    "Database Created: " + dbName,
                    "New Database",
                    JOptionPane.INFORMATION_MESSAGE
            );

            showRecords();
            
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, "Error creating database/tables: " + ex.getMessage());
        }
    }//GEN-LAST:event_jMenuItem5ActionPerformed

    private void jMenuItem6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem6ActionPerformed
        try {

            int currentYear = java.time.Year.now().getValue();
            int nextYear = currentYear + 1;
            String schoolYear = "SY" + currentYear + "_" + nextYear;
            String dbName = "Summer_" + schoolYear;
            
            TrinidadEnrollmentSystem.db = dbName;
            
            TrinidadEnrollmentSystem.DBConnect();

            TrinidadEnrollmentSystem.st.execute("CREATE TABLE IF NOT EXISTS Students ("
                    + "studid INT PRIMARY KEY AUTO_INCREMENT,"
                    + "studname VARCHAR(100) NOT NULL,"
                    + "studadd VARCHAR(200) NOT NULL,"
                    + "studcrs VARCHAR(100) NOT NULL,"
                    + "studgender VARCHAR(20) NOT NULL,"
                    + "yrlvl VARCHAR(20) NOT NULL"
                    + ")");

            TrinidadEnrollmentSystem.st.execute("CREATE TABLE IF NOT EXISTS Subjects ("
                    + "subjid INT PRIMARY KEY AUTO_INCREMENT,"
                    + "subjcode VARCHAR(50) NOT NULL,"
                    + "subjdesc VARCHAR(200) NOT NULL,"
                    + "subjunits INT NOT NULL,"
                    + "subjsched VARCHAR(100) NOT NULL"
                    + ")");

            TrinidadEnrollmentSystem.st.execute("CREATE TABLE IF NOT EXISTS Teachers ("
                    + "Tid INT PRIMARY KEY AUTO_INCREMENT,"
                    + "Tname VARCHAR(100) NOT NULL,"
                    + "Tdept VARCHAR(100) NOT NULL,"
                    + "Tadd VARCHAR(200) NOT NULL,"
                    + "Tcontact VARCHAR(50) NOT NULL"
                    + ")");

            TrinidadEnrollmentSystem.st.execute("CREATE TABLE IF NOT EXISTS Enroll ("
                    + "eid INT PRIMARY KEY AUTO_INCREMENT,"
                    + "studid INT NOT NULL,"
                    + "subjid INT NOT NULL,"
                    + "UNIQUE (studid, subjid),"
                    + "FOREIGN KEY (studid) REFERENCES Students(studid),"
                    + "FOREIGN KEY (subjid) REFERENCES Subjects(subjid)"
                    + ")");

            TrinidadEnrollmentSystem.st.execute("CREATE TABLE IF NOT EXISTS Assign ("
                    + "Tid INT NOT NULL,"
                    + "subjid INT PRIMARY KEY,"
                    + "FOREIGN KEY (Tid) REFERENCES Teachers(Tid),"
                    + "FOREIGN KEY (subjid) REFERENCES Subjects(subjid)"
                    + ")");

            TrinidadEnrollmentSystem.st.execute("CREATE TABLE IF NOT EXISTS Grades ("
                    + "GradeID INT PRIMARY KEY AUTO_INCREMENT,"
                    + "eid INT NOT NULL UNIQUE,"
                    + "Prelim TEXT NOT NULL,"
                    + "Midterm TEXT NOT NULL,"
                    + "Prefinal TEXT NOT NULL,"
                    + "Final TEXT NOT NULL,"
                    + "FOREIGN KEY (eid) REFERENCES Enroll(eid)"
                    + ")");

            TrinidadEnrollmentSystem.st.execute("CREATE TABLE IF NOT EXISTS TransactionCharges ("
                    + "TransID INT PRIMARY KEY,"
                    + "Department TEXT NOT NULL,"
                    + "SubjUnits DECIMAL(10,2) NOT NULL,"
                    + "Insurance DECIMAL(10,2) NOT NULL,"
                    + "Computer DECIMAL(10,2) NOT NULL,"
                    + "Laboratory DECIMAL(10,2) NOT NULL,"
                    + "Cultural DECIMAL(10,2) NOT NULL,"
                    + "Library DECIMAL(10,2) NOT NULL,"
                    + "Facility DECIMAL(10,2) NOT NULL"
                    + ")");

            TrinidadEnrollmentSystem.st.execute("CREATE TABLE IF NOT EXISTS Invoice ("
                    + "Invoicenum INT PRIMARY KEY,"
                    + "studid INT NOT NULL,"
                    + "TransID INT NOT NULL,"
                    + "FOREIGN KEY (studid) REFERENCES Students(studid),"
                    + "FOREIGN KEY (TransID) REFERENCES TransactionCharges(TransID)"
                    + ")");

            JOptionPane.showMessageDialog(
                    this,
                    "Database Created: " + dbName,
                    "New Database",
                    JOptionPane.INFORMATION_MESSAGE
            );

            showRecords();
            
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, "Error creating database/tables: " + ex.getMessage());
        }
    }//GEN-LAST:event_jMenuItem6ActionPerformed

    private void CourseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CourseActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_CourseActionPerformed
public void showRecords() {
        DefaultTableModel tblModel = (DefaultTableModel) studForm_Table.getModel();
        tblModel.setRowCount(0);
        
        TrinidadEnrollmentSystem main = new TrinidadEnrollmentSystem();
        main.DBConnect();
        String query = "select * from Students;";
        try {
            main.rs = main.st.executeQuery(query);
            while (main.rs.next()) {
                String a = main.rs.getString("studid");
                String b = main.rs.getString("studname");
                String c = main.rs.getString("studadd");
                String d = main.rs.getString("studcrs");
                String e = main.rs.getString("studgender");
                String f = main.rs.getString("yrlvl");
                String[] item = {a,b,c,d,e,f};
                tblModel.addRow(item);
            }
        } catch (Exception ex) {
            System.out.println("FAILED!" + ex);
        }
    }
    
   
    
    private void ShowEnrollRec(int studID){
    DefaultTableModel tblModel = (DefaultTableModel) jTable1.getModel();
    tblModel.setRowCount(0);

    String query = "SELECT s.subjid, s.subjcode, s.subjdesc, s.subjunits, s.subjsched " +
                   "FROM Enroll e " +
                   "JOIN Subjects s ON e.subjid = s.subjid " + 
                   "WHERE e.studid = " + studID;              

    try {
        TrinidadEnrollmentSystem.rs = TrinidadEnrollmentSystem.st.executeQuery(query);
        while (TrinidadEnrollmentSystem.rs.next()) {
            String[] item = {
                TrinidadEnrollmentSystem.rs.getString("subjid"),
                TrinidadEnrollmentSystem.rs.getString("subjcode"),
                TrinidadEnrollmentSystem.rs.getString("subjdesc"),
                TrinidadEnrollmentSystem.rs.getString("subjunits"),
                TrinidadEnrollmentSystem.rs.getString("subjsched")
            };
            tblModel.addRow(item);
        }
    } catch (Exception ex) {
        System.out.println("Failed to show enrolled records: " + ex);
    }
}
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(StudentsForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(StudentsForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(StudentsForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(StudentsForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new StudentsForm().setVisible(true);
                
                
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField Address;
    private javax.swing.JTextField Course;
    private javax.swing.JTextField Gender;
    private javax.swing.JTextField Name;
    private javax.swing.JTextField StudentID;
    private javax.swing.JTextField YrLevel;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JMenuItem jMenuItem3;
    private javax.swing.JMenuItem jMenuItem4;
    private javax.swing.JMenuItem jMenuItem5;
    private javax.swing.JMenuItem jMenuItem6;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JPopupMenu.Separator jSeparator1;
    private javax.swing.JTable jTable1;
    private javax.swing.JTable studForm_Table;
    // End of variables declaration//GEN-END:variables
}

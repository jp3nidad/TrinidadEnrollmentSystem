/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.mycompany.trinidadenrollment;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import javax.swing.JOptionPane;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.regex.Pattern;
import java.util.regex.Matcher;

/**
 *
 * @author chicc
 */
public class Login extends javax.swing.JFrame {

    private static final Logger logger = Logger.getLogger(Login.class.getName());

    
    private boolean loggedIn = false;
    private String loggedInUsername;
    private String loggedInPassword;
    
    /**
     * Creates new form Login
     */
    public Login() {
        initComponents();
        setLocationRelativeTo(null);
        
        jComboBox2.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] {"School Year"}));
        jComboBox2.setSelectedItem("School Year");

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jCheckBoxMenuItem1 = new javax.swing.JCheckBoxMenuItem();
        jCheckBoxMenuItem2 = new javax.swing.JCheckBoxMenuItem();
        jCheckBoxMenuItem3 = new javax.swing.JCheckBoxMenuItem();
        jCheckBoxMenuItem4 = new javax.swing.JCheckBoxMenuItem();
        jCheckBoxMenuItem5 = new javax.swing.JCheckBoxMenuItem();
        jCheckBoxMenuItem6 = new javax.swing.JCheckBoxMenuItem();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        Login = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        jComboBox2 = new javax.swing.JComboBox<>();
        Submit = new javax.swing.JButton();
        jPasswordField1 = new javax.swing.JPasswordField();

        jCheckBoxMenuItem1.setSelected(true);
        jCheckBoxMenuItem1.setText("jCheckBoxMenuItem1");

        jCheckBoxMenuItem2.setSelected(true);
        jCheckBoxMenuItem2.setText("jCheckBoxMenuItem2");

        jCheckBoxMenuItem3.setSelected(true);
        jCheckBoxMenuItem3.setText("jCheckBoxMenuItem3");

        jCheckBoxMenuItem4.setSelected(true);
        jCheckBoxMenuItem4.setText("jCheckBoxMenuItem4");

        jCheckBoxMenuItem5.setSelected(true);
        jCheckBoxMenuItem5.setText("jCheckBoxMenuItem5");

        jCheckBoxMenuItem6.setSelected(true);
        jCheckBoxMenuItem6.setText("jCheckBoxMenuItem6");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setText("Username");

        jLabel2.setText("Password");

        jTextField1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField1ActionPerformed(evt);
            }
        });

        Login.setText("Login");
        Login.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                LoginActionPerformed(evt);
            }
        });

        jLabel3.setText("School Year");

        jComboBox2.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        jComboBox2.setToolTipText("");
        jComboBox2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox2ActionPerformed(evt);
            }
        });

        Submit.setText("Submit");
        Submit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SubmitActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(67, 67, 67)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jLabel3)
                                .addComponent(jLabel2))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addGap(12, 12, 12)))
                        .addGap(30, 30, 30)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jTextField1)
                            .addComponent(jComboBox2, 0, 139, Short.MAX_VALUE)
                            .addComponent(jPasswordField1)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(195, 195, 195)
                        .addComponent(Login))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(197, 197, 197)
                        .addComponent(Submit)))
                .addContainerGap(174, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(56, 56, 56)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jPasswordField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(12, 12, 12)
                .addComponent(Login)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(jComboBox2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(Submit)
                .addContainerGap(78, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jTextField1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField1ActionPerformed

    private void LoginActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_LoginActionPerformed
        String mysqlUsername = this.jTextField1.getText().trim();
        String mysqlPassword = this.jPasswordField1.getText(); // Assuming jTextField2 is now JPasswordField or its content is the password string

     
        
        // Use the connection IP from the main system class
        String home = "192.168.0.174"; 
        
        // This attempts to connect to the MySQL SERVER, not a specific DB
        try (Connection testConn = DriverManager.getConnection(
                "jdbc:mysql://" + home + ":3306/?zeroDateTimeBehavior=CONVERT_TO_NULL&connectTimeout=5000", 
                mysqlUsername, mysqlPassword);
             Statement stmt = testConn.createStatement()) 
        {
            System.out.println("MySQL Login Successful!");
            
            loggedIn = true;
            this.loggedInUsername = mysqlUsername;
            this.loggedInPassword = mysqlPassword;

            java.util.ArrayList<String> accessibleDatabases = new java.util.ArrayList<>();

            boolean isStudent = mysqlUsername.matches("1\\d{3}[a-zA-Z].*");

            if ("root".equalsIgnoreCase(mysqlUsername)) {
                // Method 1A: Root user uses SHOW DATABASES (full visibility)
                try (ResultSet rs = stmt.executeQuery("SHOW DATABASES")) {
                    while (rs.next()) {
                        String dbName = rs.getString(1);
                        if (dbName.matches("^(1st|2nd|Summer)_SY20\\d{2}_20\\d{2}$")) {
                            accessibleDatabases.add(dbName);
                        }
                    }
                }
            } else if (isStudent) {
                 // METHOD 1B: STUDENT GRANTS CHECK (The correct, granular method)
                 // This method relies on the admin having granted SELECT on the specific databases.
                 try (ResultSet rs = stmt.executeQuery("SHOW GRANTS FOR CURRENT_USER()")) {
                    Pattern dbPattern = Pattern.compile("ON `([^`]+)`\\.\\*");
                    while (rs.next()) {
                        String grant = rs.getString(1);
                        
                        // Extract DB name from grants
                        Matcher matcher = dbPattern.matcher(grant);
                        
                        while (matcher.find()) {
                            String dbName = matcher.group(1);
                            if (dbName.matches("^(1st|2nd|Summer)_SY20\\d{2}_20\\d{2}$")) {
                                if (!accessibleDatabases.contains(dbName)) {
                                    accessibleDatabases.add(dbName);
                                }
                            }
                        }
                    }
                } catch (SQLException grantEx) {
                    // Log failure, but the list remains empty, which is correct if the student has no grants.
                    logger.log(Level.WARNING, "SHOW GRANTS failed for student. The list will remain empty if no grants were found.", grantEx);
                }
            } else {
                // Method 1C: General non-root user (e.g., Teacher) uses SHOW DATABASES
                 try (ResultSet rs = stmt.executeQuery("SHOW DATABASES")) {
                    while (rs.next()) {
                        String dbName = rs.getString(1);
                        if (dbName.matches("^(1st|2nd|Summer)_SY20\\d{2}_20\\d{2}$")) {
                            if (!accessibleDatabases.contains(dbName)) {
                                accessibleDatabases.add(dbName);
                            }
                        }
                    }
                }
            }
            
            java.util.Collections.sort(accessibleDatabases);
            jComboBox2.removeAllItems();
           
            
            for (String dbName : accessibleDatabases) {
                jComboBox2.addItem(dbName);
            }
            
            
            
        } catch (SQLException ex) {
            String errorMsg = ex.getMessage();
            if (errorMsg.contains("Access denied")) {
                 errorMsg = "Access denied";
            } else if (errorMsg.contains("The driver was unable to establish a connection")) {
                 errorMsg = "Could not connect to MySQL server. Check IP and port configuration.";
            }
            logger.log(Level.SEVERE, "Login Failed: {0}", errorMsg);
            JOptionPane.showMessageDialog(this, "Login Failed: " + errorMsg, "Access Denied", JOptionPane.ERROR_MESSAGE);
        } catch (Exception ex) {
             logger.log(Level.SEVERE, "Error during login process.", ex);
        }
    }//GEN-LAST:event_LoginActionPerformed

    private void SubmitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SubmitActionPerformed
        if (!loggedIn) {
            JOptionPane.showMessageDialog(this, "Please log in successfully first.", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        String selectedItem = (String) jComboBox2.getSelectedItem();
        if (selectedItem == null || selectedItem.isEmpty() || selectedItem.contains("-- Select") || selectedItem.contains("School Year") || selectedItem.contains("No accessible")) {
            JOptionPane.showMessageDialog(this, "Please select a valid database from the dropdown.", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        String dbName = selectedItem;
        TrinidadEnrollmentSystem.db = dbName;
        TrinidadEnrollmentSystem.uname = loggedInUsername;
        TrinidadEnrollmentSystem.pswd = loggedInPassword;

        try {
            TrinidadEnrollmentSystem.DBConnect();
            logger.log(Level.INFO, "Successfully connected to database: {0}", dbName);

            // --- ROUTING LOGIC ---
            boolean isStudent = loggedInUsername.matches("1\\d{3}[a-zA-Z].*");
            // Teacher format check (Starts with 3, digits, then letters)
            boolean isTeacher = loggedInUsername.matches("3\\d{3}[a-zA-Z].*"); 

            if ("root".equalsIgnoreCase(loggedInUsername)) {
                StudentsForm SForm = new StudentsForm();
                SForm.setVisible(true);
                logger.log(Level.INFO, "Root user launching StudentsForm (Admin View).");
            
            } else if (isTeacher) { // Check for Teacher FIRST
                // *** Teacher routes to GradesForm ***
                GradesForm GForm = new GradesForm(); 
                GForm.setVisible(true);
                logger.log(Level.INFO, "Teacher user launching GradesForm.");

            } else if (isStudent) { 
                StudRegistration RForm = new StudRegistration();
                RForm.setVisible(true);
                logger.log(Level.INFO, "Student user launching StudRegistration (Student View).");
            
            } else { // Fallback for any other user
                StudRegistration RForm = new StudRegistration();
                RForm.setVisible(true);
                logger.log(Level.INFO, "Non-admin, non-student, non-teacher user launching StudRegistration (Fallback View).");
            }
            // --- END ROUTING LOGIC ---

            this.dispose(); // Close the login window

        } catch (Exception ex) {
            logger.log(Level.SEVERE, "Failed to launch application after DB select.", ex);
            JOptionPane.showMessageDialog(this, "Failed to connect to the selected database: " + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_SubmitActionPerformed

    private void jComboBox2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox2ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jComboBox2ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Login.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Login.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Login.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Login.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Login().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Login;
    private javax.swing.JButton Submit;
    private javax.swing.JCheckBoxMenuItem jCheckBoxMenuItem1;
    private javax.swing.JCheckBoxMenuItem jCheckBoxMenuItem2;
    private javax.swing.JCheckBoxMenuItem jCheckBoxMenuItem3;
    private javax.swing.JCheckBoxMenuItem jCheckBoxMenuItem4;
    private javax.swing.JCheckBoxMenuItem jCheckBoxMenuItem5;
    private javax.swing.JCheckBoxMenuItem jCheckBoxMenuItem6;
    private javax.swing.JComboBox<String> jComboBox2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPasswordField jPasswordField1;
    private javax.swing.JTextField jTextField1;
    // End of variables declaration//GEN-END:variables
}
